<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA General Task//EN" "generalTask.dtd">
<!--  This file is part of the DITA Open Toolkit project. See the accompanying LICENSE file for applicable license.  -->
<task id="ID">
  <title>Running the <cmdname>dita</cmdname> command from a GitHub Action</title>
  <titlealts>
    <navtitle>Using GitHub Actions</navtitle>
  </titlealts>
  <shortdesc>
    <ph id="github-actions-desc">
      <xref
        keyref="github-actions"
      /> are a CI/CD Workflow mechanism attached to GitHub. Each Action is an individual unit of functionality that can be combined with other GitHub Actions to create workflows, which are triggered in response to certain GitHub events. As of version 3.6, the DITA-OT project provides an official <codeph
      >dita-ot-build</codeph> Action that can be used as a step within a GitHub workflow to create documentation as part of your CI/CD pipeline</ph></shortdesc>
  <prolog>
    <metadata>
      <keywords>
        <indexterm><cmdname>dita</cmdname> command
          <indexterm>running from GitHub CI/CD</indexterm></indexterm>
        <indexterm>GitHub Actions</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <taskbody>
    <section>
      <title>About GitHub Actions</title>
      <p>
        GitHub Actions can automate tasks such as document generation as part of your
        software development life cycle. GitHub Actions are event-driven, allowing a
        series of tasks to run one after another when a specified event has occurred.
      </p>
      <p>
        Each step is an individual atomic task that can run commands in a job. A step can be either an action or a shell command. Each step in a job executes on the same runner, allowing the actions in that job to share data with each other, therefore files generated through the <codeph
        >dita-ot-build</codeph> Action can be archived or published by later actions within the same job.
    </p>
    </section>
    <steps>
      <step>
        <cmd>In your GitHub repository, create the <codeph
          >.github/workflows/</codeph> directory to store your workflow files.</cmd>
      </step>
      <step>
        <cmd>In the <codeph
          >.github/workflows/</codeph> directory, create a new file called dita-ot-build-actions.yml and add the following code.</cmd>
          <stepxmp>
          <codeblock outputclass="language-yaml">name: CI
'on':
  push:
    branches:
      - master
jobs:
  build-dita:
    name: Build DITA
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
          </codeblock>
        </stepxmp>
        <info>This setup ensures the action runs whenever code is updated on the <codeph>master</codeph> branch and
        checks out the codebase.</info>
      </step>
      <step>
        <cmd>In the same file add the following code.</cmd>
        <stepxmp>
          <codeblock outputclass="syntax-yaml"> - name: Build HTML5 using DITA-OT
  uses: dita-ot/dita-ot-action@master
  with:
      input: document.ditamap
      transtype: html5
      output-path: out</codeblock>
          <p>This action specifies the following:
            <ul>
              <li><parmname
                >name</parmname> defines the name of the action to be displayed within the GitHub repository</li>
              <li><parmname>uses</parmname> specifies the  name and version of the GitHub Action to run. Use  <codeph
                >dita-ot/dita-ot-action@master</codeph> to run the latest version</li>
              <li><parmname>input</parmname> specifies the name and location of the <filepath
                >document.ditamap</filepath> within the GitHub repository relative to the root
                  as the input map file</li>
              <li><parmname>transtype</parmname> sets the output format to HTML5, and</li>
              <li><parmname>output-path</parmname> writes the output to <filepath
                >out</filepath> location within the running action</li>
            </ul>
          </p>
        </stepxmp>
      </step>
    </steps>
    <example>
      <p>The following GitHub Action generates styled HTML and PDF outputs</p>
      <p>
        <codeblock outputclass="language-yaml normalize-space show-line-numbers show-whitespace"><coderef
            href="../samples/github_action/dita-ot-pipeline.yaml"
          /></codeblock></p>
      <p>The Build HTML step reuses the <parmname>input</parmname>, <parmname>transtype</parmname> and <parmname
        >output-path</parmname> settings. In addition, additional DITA-OT plugins can be loaded using the <parmname
        >plugins</parmname> parameter, with each plugin separated by a comma or new line separator.
      </p>
      <p>The Build PDF step uses an alternative syntax where the <parmname>install</parmname> and <parmname
        >build</parmname> parameters are used to run arbitrary commands from the command line.</p>
    </example>
    <postreq>Another resource for learning about GitHub Actions are the files in the <filepath
        conkeyref="conref-task/samples-dir"
      /><filepath>/github_action/</filepath> directory. This
      directory contains sample GitHub Actions for different scenarios.</postreq>
  </taskbody>
</task>
